{"name":"Drools Course","tagline":"","body":"# Drools介绍和环境搭建\r\n\r\n关于Drools的介绍，我们看下官网的描述：\r\n>Drools is a Business Rules Management System (BRMS) solution. It provides a core Business Rules Engine (BRE), a web authoring and rules management application (Drools Workbench) and an Eclipse IDE plugin for core development.\r\n\r\nDrools是一个业务规则管理系统解决方案。它提供一整套核心业务规则引擎(BRE)，Web验证规则管理应用(Drools Workbench)和Eclipse IDE插件。我们用到的只是解决方案中的规则引擎部分，它允许开发人员将业务规则以规则文件的形式存储，这样业务改变只需要修改规则文件，不需要修改代码部署版本即可完成业务的引入或变更。\r\n\r\n## Drools安装\r\nDrools的开发环境搭建通常有两种方式，本人亲测两种都能安装成功，不过个人更倾向于第一种，也是官方推荐的方法。\r\n### 基础环境\r\n* OS: Ubuntu10.10\r\n* JRE version: 1.8.0_45\r\n* IDE: Eclipse\r\n\r\n### Installation Method 1 - Eclipse install new software\r\n到Drools下载页面(http://www.jboss.org/drools/downloads.html)\r\n-下载并解压Drools：drools-distribution-5.5.0.Final.zip  (解压目录随意)\r\n-下载并解压插件：droolsjbpm-tools-distribution-5.5.0.Final.zip(解压目录随意)\r\n- 打开 Eclipse.\r\n- 点 \"Help\"—\"Install new software...\"\r\n- 点击 \"Add...\"  \r\n- 在name中输入\"Drools5.5\"(名字随意起)\r\n- 点击 \"Local...\" 并且选择\"......./binaries/org.drools.updatesite\" (此目录在刚刚解压的插件中)\r\n- 点击OK\r\n- 选择所以插件。\r\n-下面就是点击next，finish\r\n \r\n插件安装完后还需在Eclipse中添加Drools的运行环境：\r\n- 点击\"Windows\"—\"Preferencess\"\r\n- 在窗口的树形菜单中选择\"Drools\"—\"Installed Drools Runtimes\"\r\n- 在右边的空的Drools运行库列表中，点击\"Add\"\r\n- 在弹出窗口中name输入Drools5.5 Runtime(随意起个名字)，在Path选择\"......./drools-distribution-5.5.0.Final/drools-distribution-5.5.0.Final/binaries\" (此目录在刚刚解压的Drools中)，\r\n- 点击\"OK\"\r\n- 点击\"OK\"\r\n\r\n### Installation Method 2 - Plugins link\r\n下载Method1中的两个压缩包\r\n* 在Eclipse安装目录下创建两个文件links, myPlugins(名字随意)\r\n* 在myplugin下新建一个drools文件夹。。将以解压后的文件的上一层目录下features,plugins 复制到里面\r\n* 在 links 目录下创建一个 drools.txt(名字随意)，打开并输入：path=(Eclipse路径)\\\\eclipse\\\\myplugins\\\\drools\r\n* 保存关闭 drools.txt，并将后缀改成 drools.link，重启 eclipse\r\n* 安装运行时方式如Method 1\r\n\r\n## 示例程序\r\n打开Eclipse -> File -> New -> Drools Project，输入项目名后会有示例程序的选项，先全部勾选上吧。\r\n可以看到生成的项目里包含了很多文件，我们暂时先不用理清每个文件的含义，重点关注src/main/java/com.sample/DroolsTest.java和src/main/rules/Sample.drl\r\n\r\nDroolsTest.java\r\n```java\r\npackage com.sample;\r\n\r\nimport org.drools.KnowledgeBase;\r\nimport org.drools.KnowledgeBaseFactory;\r\nimport org.drools.builder.KnowledgeBuilder;\r\nimport org.drools.builder.KnowledgeBuilderError;\r\nimport org.drools.builder.KnowledgeBuilderErrors;\r\nimport org.drools.builder.KnowledgeBuilderFactory;\r\nimport org.drools.builder.ResourceType;\r\nimport org.drools.io.ResourceFactory;\r\nimport org.drools.logger.KnowledgeRuntimeLogger;\r\nimport org.drools.logger.KnowledgeRuntimeLoggerFactory;\r\nimport org.drools.runtime.StatefulKnowledgeSession;\r\n\r\n/**\r\n * This is a sample class to launch a rule.\r\n */\r\npublic class DroolsTest {\r\n\r\n    public static final void main(String[] args) {\r\n        try {\r\n            // load up the knowledge base\r\n            KnowledgeBase kbase = readKnowledgeBase();\r\n            StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\r\n            KnowledgeRuntimeLogger logger = KnowledgeRuntimeLoggerFactory.newFileLogger(ksession, \"test\");\r\n            // go !\r\n            Message message = new Message();\r\n            message.setMessage(\"Hello World\");\r\n            message.setStatus(Message.HELLO);\r\n            ksession.insert(message);\r\n            ksession.fireAllRules();\r\n            logger.close();\r\n        } catch (Throwable t) {\r\n            t.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static KnowledgeBase readKnowledgeBase() throws Exception {\r\n        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\r\n        kbuilder.add(ResourceFactory.newClassPathResource(\"Sample.drl\"), ResourceType.DRL);\r\n        KnowledgeBuilderErrors errors = kbuilder.getErrors();\r\n        if (errors.size() > 0) {\r\n            for (KnowledgeBuilderError error: errors) {\r\n                System.err.println(error);\r\n            }\r\n            throw new IllegalArgumentException(\"Could not parse knowledge.\");\r\n        }\r\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\r\n        kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());\r\n        return kbase;\r\n    }\r\n\r\n    public static class Message {\r\n\r\n        public static final int HELLO = 0;\r\n        public static final int GOODBYE = 1;\r\n\r\n        private String message;\r\n\r\n        private int status;\r\n\r\n        public String getMessage() {\r\n            return this.message;\r\n        }\r\n\r\n        public void setMessage(String message) {\r\n            this.message = message;\r\n        }\r\n\r\n        public int getStatus() {\r\n            return this.status;\r\n        }\r\n\r\n        public void setStatus(int status) {\r\n            this.status = status;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n```\r\nSample.drl\r\n```java\r\npackage com.sample\r\n \r\nimport com.sample.DroolsTest.Message;\r\n \r\nrule \"Hello World\"\r\n    when\r\n        $m : Message( status == Message.HELLO, $myMessage : message )\r\n    then\r\n        System.out.println( $myMessage );\r\n        $m.setMessage( \"Goodbye cruel worlds\" );\r\n        $m.setStatus( Message.GOODBYE );\r\n        update( $m );\r\nend\r\n\r\nrule \"GoodBye\"\r\n    when\r\n        Message( status == Message.GOODBYE, $myMessage : message )\r\n    then\r\n        System.out.println( $myMessage );\r\nend\r\n```\r\n\r\n运行下试试看，可以看到控制台输出了\r\n\r\nHello World   </br>\r\n\r\nGoodbye cruel worlds   </br>\r\n\r\n可以看到我们并没有在java代码里写业务逻辑代码，业务都是包含在规则中的，这就是规则引擎的功劳了，以后的章节我们会详细分析。\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}